@startuml ClassDiagram

title Game Class Diagram

skinparam linetype ortho

enum Rank 
enum Suit
Card *--> Rank
Card *--> Suit
class Card {
  This is a possible encoded type that is not a simple struct,
  in order to allow for more compact encoding of cards. char
  is enough to fit all the possible values.
  ---
  + rank() : Rank
  + suit() : Suit
}

interface Game {
  + {abstract} playRound(seats : std::set<Seat*>) 
}

stereotype "CommunityCardPoker<HandType, EvaluatorType>" as CommunityCardPoker {
  + playRound(seats : std::set<Seat*>) 

  + getCommunityCards() : std::vector<Card>
  + getHandEvaluator() : EvaluatorType
  + getHandType() : HandType
}
Game <|-- CommunityCardPoker

struct NoLimitHoldemHand {
  + player_cards : std::array<Card, 2>
  + community_cards : std::array<Card, 5>
}
NoLimitHoldemHand o--> Card

class StandardEvaluator {
  A generic implementation of a hand evaluator.
  This is purely an implementation detail.
  ---
  + {static} evaluate(hand : std::vector<Card>) : std::uint64_t
}
StandardEvaluator x--> Card

class NoLimitHoldemEvaluator {
  + {static} evaluate(hand : NoLimitHoldemHand) : NoLimitHoldemHandEvaluation
}
StandardEvaluator <..x NoLimitHoldemEvaluator : may use
NoLimitHoldemEvaluator x--> NoLimitHoldemHand
NoLimitHoldemEvaluator x--> NoLimitHoldemHandEvaluation : creates

class NoLimitHoldemHandEvaluation {
  The comparison functions may be friend non-members.
  ---
  + {static} compare(const & _, const & _) : int
  + {static} operator<=> (const & _, const & _) : std::strong_ordering

  - value : std::uint64_t
}

class NoLimitHoldem <<CommunityCardPoker<NoLimitHoldemHand, NoLimitHoldemEvaluator>> {
}
CommunityCardPoker <|-- NoLimitHoldem

@enduml
