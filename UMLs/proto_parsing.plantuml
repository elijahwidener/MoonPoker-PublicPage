@startuml
left to right direction
  class MessageExtractor << (F, #FF7700) File >> {
    +extract_message_definitions(translation_unit: TranslationUnit): List[MessageType]
    -is_message_declaration(cursor: Cursor): bool
    -is_serializable_class(cursor: Cursor): bool
    -is_serializable_field(cursor: Cursor): bool
    -field_index(cursor: Cursor): int
    -collect_serializable_fields(cursor: Cursor): List[SerializableField]
  }  

  class ProtoGenerator << (F, #FF7700) File >> {
    +generate_proto_code(message_type: MessageType): str
  }
    package "Message Types"<< File >>{
  class MessageType {
    +name: str
    +fields: List[SerializableField]
  }

  class SerializableField {
    +name: str
    +variable_type: MessageFieldType
    +index: int
  }

  class UnionField {
    +name: str
    +element_types: List[SerializableField]
  }

  class PrimitiveFieldType {
    <<enumeration>>
    INT8
    UINT8
    INT16
    UINT16
    INT32
    UINT32
    INT64
    UINT64
    FLOAT32
    FLOAT64
    STRING
    BOOL
    BYTE
  }

  class FieldTypeMultiplicity {
    <<enumeration>>
    REQUIRED
    OPTIONAL
    REPEATED
  }

  class FieldType {
    +element_type: PrimitiveFieldType | MessageType
    +multiplicity: FieldTypeMultiplicity
  }

  class MapFieldType {
    +key_type: PrimitiveFieldType
    +value_type: PrimitiveFieldType | MessageType
  }
 }



  MessageType x-- SerializableField 
  MessageExtractor --> ProtoGenerator: Sends Extracted Messages

  SerializableField -> FieldType : has

  FieldType -> MessageType : has
  FieldType -> FieldTypeMultiplicity : has



@enduml